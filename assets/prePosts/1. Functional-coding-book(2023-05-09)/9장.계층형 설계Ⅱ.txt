※ 계층형 설계 Ⅱ - 1

● 시작하며

이번에는 추상화의 개념을 설명한다.
추상화는 객체 지향형 프로그래밍에서 중요한 개념으로 뽑히는 것 중 하나이다.
이 책을 통해 자바스크립트로 진행하는 추상화의 개념과 자바의 그것이 어떻게 다른지 파악해보자.


● 패턴 2: 추상화 벽

네 개의 패턴
1. 직접 구현 <span style="color: red;">✔<span>
2. 추상화 벽
3. 작은 인터페이스
4. 편리한 계층

중 1번은 이전 챕터에서 진행 했다.
이번 챕터에서는 추상화 벽과 작은 인터페이스를 진행하는데, 추상화 벽을 먼저 확인해보겠다.

![01](/assets/img/05.Functional-coding/09/01.png)

![02](/assets/img/05.Functional-coding/09/02.png)


이 책에서 추상화를 설명하는 개념이 재미있었다.
서로 다른 팀이 같이 작업을 하는 개념으로 설명을 했다.

자바에서 제일 유명한 추상화의 개념이라면 서비스 인터페이스를 만들어 오버라이딩을 통해 구현하는 서비스Impl이 되겠다.
책에서 설명하는 개념과 비슷하긴 하지만, 종속되어 동작하는 특성 상 책에서 설명하는 것과 완전히 같진 않을 것 같다.

<i>최근에는 인터페이스인 서비스가 점점 사라지는 추세이기도 하다.</i>

---

![03](/assets/img/05.Functional-coding/09/03.png)

위의 그림을 보면 조금 더 쉽게 이해할 수 있다.

그림의 개발자는 api를 설계한다고 생각하면 편하다.
그러면 일반개발자는 개발자가 설계한 api를 정리한 Api 정의서를 보고 호출하여 조건에 맞춰 사용하기만 하면 된다.
위 그림에서 점선이 Api 정의서를 나타낸다고 생각하면 되겠다.

혹은 코드 상 추상화의 개념과 이전 챕터에서 나온 Layer의 개념을 접목하여 낮은 수준의 함수를 추상화 하여 진행해도 된다.
아직 확실하게 아는 건 아니지만 위에서 설명한 식으로 관심사를 모아 낮은 수준의 코드를 중첩하지 않고 호출하는 계층을 높여가며 설계해서 
사용할 수 있게 정리하는 아키텍처도 존재하는 것으로 안다.

중요한 점은 개발자가 이렇게 고민하는 코드를 일반 개발자, 혹은 사용자는 아무 문제 없이 호출만 하면 사용할 수 있는 장점이 있다.
이러한 점은 큰 장점이 될 수 있는데, 책에서는 이러한 장점을 여태 <b>배열로 관리하던 장바구니의 <span style="color: red;">데이터 타입을 객체로 바꾸면서 설명</span></b>해준다.
객체로 바꾼 후에도 동작에 문제 없이 만들고 게다가 장바구니에 담겨있는 아이템의 index를 반환하는 indexOfItem(cart, item) 함수도 더 이상 필요하지 않게 된다.
코드는 더 간결해지고 필요없는 함수도 제거했지만..!

이를 사용하는 사람은 그러한 과정을 전혀 몰라도 기존과 동일하게 이용 가능하다.

---

● 추상화 벽은 언제 사용하면 좋을까요?

1. 쉽게 구현을 바꾸기 위해
2. 코드를 읽고 쓰기 쉽게 만들기 위해
3. 팀 간에 조율해야 할 것을 줄이기 위해
4. 주어진 문제에 집중하기 위해

구현에 확신이 없는 경우 추상화 벽을 이용하면 구현을 간접적으로 진행하며 테스트 할 수 있어서 나중에 구현을 변경하기 쉽다.
책에서 말하는 마케팅 팀(일반 개발자, 사용자)는 본인에게 주어진 기능을 어떻게 효율적으로 사용할지만 고민하면 된다.