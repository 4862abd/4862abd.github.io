이제 @SafeVarargs 애너테이션을 위한 준비는 어느정도 마쳤다.
이 애너테이션을 끝내면 드디어 Set 을 공부할 수 있다.

---

## ● 문서 독해(?)

출처: [@SafeVarargs] (https://docs.oracle.com/javase/8/docs/api/java/lang/SafeVarargs.html)

직전에 읽다가 Non-reifiable 타입으로 빠졌으니 그 이후의 문서를 확인해보자.

> In addition to the usage restrictions imposed by its @Target meta-annotation,
> @Target 메타 주석에 의해 주어진(겹쳐진) 사용 제한 외에도,
> 
> compilers are required to implement additional usage restrictions on this annotation type;
> 컴파일러는 이 애너테이션을 위해 추가의 사용 제한을 필요로 한다.
> 
> it is a compile-time error if a method or constructor declaration is annotated with a @SafeVarargs annotation, and either:...
> 만약 메서드나 생성자 메서드 정의에 @SafeVarargs 애너테이션이 부여되면 컴파일 시간 에러이다, 그리고...


자, 이해가 되는가?
저걸 읽으면서 황파고의 번역과 내 번역과 구글의 번역과
비교하면 서로 달랐던 것을 보고
<i>아 이거 컴퓨터도 해석 못하네 ㅋㅋㅋ</i>
싶었다.
물론 이해가 안 된다는 것은 아니다.
하지만 적어도 이해하기 난해한 것은 확실하다.

<b>그래서 @SafeVarargs 애너테이션의 역할이 무엇인가?</b>

---

## ● @SafeVarargs 의 역할

문서에 이런 말이 있다.

> Compilers are encouraged to issue warnings when this annotation type is applied to a method or constructor declaration where...
> 이 주석 유형이 메소드 또는 생성자 선언에 적용될 때 컴파일러는 경고를 발행하도록 권장한다.

그렇다.
개발 혹은 성능적인 역할이 아니다.
<b>가변인자를 사용하는 메서드의 안전을 보장하는 애너테이션이다.</b>

즉, 우리가 임의로 지정하고 함부로 오버라이딩 하는 메서드 등 변수가 생길 메서드에는 사용할 수가 없다.
실제로 인텔리 J 를 통해 코딩을 진행할 때,
메서드에 final 예약어를 쓰지 않거나, 구체화 타입의 가변인자 타입은 경고하듯 색상이 변한다.

### final 예약어를 사용하지 않은 경우

![01](/assets/img/04.Java/00.etc/01.png)

아예 에러를 날린다.

---

### 구체화 타입을 가변인자로 받은 경우

![02](/assets/img/04.Java/00.etc/02.png)

---

재밌었다.
꽤 알찬 것 같다.
아직 공부가 부족해서 가변인자를 많이 사용할지 예상은 되질 않지만,
중간중간 나온 개념이 꽤 재밌었다.