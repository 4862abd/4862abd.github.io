※ 일급 함수 Ⅱ

## ● 그래프로 알 수 있는 코드에 대한 정보는 무엇이 있을까요?

![01](/assets/img/05.Functional-coding/11/01.png)

이전에 카피-온-라이트 패턴과 함수 본문 콜백으로 바꾸기를 배웠다.
책에서 왜 두 키워드를 다시 꺼내왔을까?
챕터의 서두에서 카피-온-라이트 패턴의 1차원적 모습을 보고 코드 냄새를 거론한다.
카피-온-라이트 패턴의 코드를 보자.

```javascript
function arraySet(array, idx, value) {
	var copy = array.slice();	// 복사
	copy[idx] = value;		// 본문(수정)
	return copy;		// 반환
}

function push(array, element) {
	var copy = array.slice();	// 복사
	copy.push(element);		// 본문(수정)
	return copy;		// 반환
}
```

카피-온-라이트 패턴의 특징은

1. 복사본을 만든다.
2. 복사본을 수정한다.
3. 복사본을 반환한다.

위 3가지 차례 중, 같은 데이터 타입을 수정하는 함수들이 많다면 함수 간 차이점은 "2번. 복사본을 수정한다" 밖에 없다.
즉, 같은 데이터 타입의 데이터를 복사하고 반환하는 코드는 카피-온-라이트 패턴에서 반복될 코드라는 것이다.
이 코드 냄새를 책에서는 <b>함수 본문을 콜백으로 바꾸기</b> 로 해결한다.

리팩토링 단계

1. 복사본을 수정하는 부분을 추출하여 콜백으로 전달한다.
2. 같은 데이터 타입을 복사하는 카피-온-라이트 패턴의 함수를 