※ 계층형 설계 Ⅱ - 3

## ● 그래프로 알 수 있는 코드에 대한 정보는 무엇이 있을까요?

![07](/assets/img/05.Functional-coding/09/07.png)

호출 그래프의 구조이다.
이 그래프는 세 가지 중요한 비 기능적 요구사항을 보여준다.

> <b>기능적 요구사항(Functional Requirements)</b>
> 애플리케이션이 정확히 해야 하는 일을 의미한다.
> 
> <b>비기능적 요구사항(Non-Functional Requirements, NFRs)</b>
> 테스트를 어떻게 하고, 재사용할 수 있는지, 유지보수하기 어렵지 않은가 등의
> 기능적인 영역을 벗어난 요구사항

비기능적 요구사항은 소프트웨어를 설계하는 중요한 이유이다.
호출 그래프로 알 수 있는 세 가지 비기능적 요구사항을 알아보자.

1. 유지보수성(maintainability): 요구 사항이 바뀌었을 때 가장 쉽게 고칠 수 있는 코드는 어떤코드인가?
2. 테스트성(testability): 어떤 것을 테스트하는 것이 가장 중요한가?
3. 재사용성(reuseability): 어떤 함수가 재사용하기 좋은가?

## ● 그래프의 가장 위에 있는 코드가 고치기 가장 쉽습니다.

![08](/assets/img/05.Functional-coding/09/08.png)

제목 그대로 이다.
아래에 있는 코드일수록 본인의 상위에서 호출하는 횟수가 많아진다.
즉, 의존성이 많이 걸려있는 코드임으로 변경 시에 많은 변수를 가질 수 있다.
그러한 이유 때문에 호출 당하는 횟수가 가장 적은, 제일 상단에 있는 코드는 다른 코드에 영향을 주지 않으며 가장 고치기 쉽다.
하지만 바뀌는 것이 많은 상태의 함수가 상단 Layer 에 위치하는 코드를 적게 유지하는 것이 좋다.

---

## ● 아래에 있는 코드는 테스트가 중요합니다.

![09](/assets/img/05.Functional-coding/09/09.png)

모든 코드를 테스트하는 것은 현실적이지 않다.
모든 컷을 테스트할 수 없다면 장기적으로 좋은 결과를 얻기 위해서 가장 하단의 코드들을 테스트 하는 것이 중요하다.
물론 상위코드를 테스트 하게 되면 하위코드들도 같이 테스트 될 것이다.
문제점 1. 하지만 하위코드는 중복해서 호출될 것이고, 그렇다면 같은 자원을 이용해 테스트를 진행하는 경우 더 적은 케이스만 테스트할 수 있을 것이다.
그리고 애플리케이션의 설계가 확실하다면 하단의 코드보다 상단의 코드가 더 많이 바뀔 것이다.
문제점 2. 바로 위에서 짚은 점처럼, 상단의 코드는 하단의 코드보다 변경될 기회에 더 노출되어 있고, 그렇게되면 테스트도 다시 해야할 것이다.

그렇기에 가장 많이 호출되는 하단의 코드들을 테스트 하는 것이 좋다.

---

## ● 아래에 있는 코드가 재사용하기 더 좋습니다.

너무나도 당연한 말이다.
상단의 코드는 변경의 기회에 노출될 뿐 아니라 테스트 진행에도 문제가 있다.
하지만 변경될 기회도 적고, 테스트하기 쉬운 하단의 코드는 어디서든 재사용하기 쉽다.
실제로 그림을 보면 본인을 호출하여 의존하는 상위의 코드가 많은 하단의 코드들이 눈에 띈다.

즉, 아래쪽으로 가리키는 화살표가 많은 함수는 그렇지 않은 함수보다 재사용하기 어렵다.

---

## ● 요약: 그래프가 코드에 대해 알려주는 것.

![10](/assets/img/05.Functional-coding/09/10.png)

<b>유지보수성</b>

규칙: 위로 연결된 것이 적은 함수가 바꾸기 쉽다.
핵심: 자주 바뀌는 코드는 가능한 위쪽에 있어야 한다.

<b>테스트 가능성</b>

규칙: 위쪽으로 많이 연결된 함수를 테스트하는 것이 더 가치 있다.
핵심: 아래쪽에 있는 함수를 테스트하는 것이 위쪽에 있는 함수를 테스트하는 것보다 가치 있다.

<b>재사용성</b>

규칙: 아래쪽에 함수가 적을수록 더 재사용하기 좋다.
핵심: 낮은 수준의 단계로 함수를 빼내면 재사용성이 더 높아진다.

